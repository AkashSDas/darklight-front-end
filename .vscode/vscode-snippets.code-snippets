{
  // Place your front-end workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  "NextJS page": {
    "scope": "typescriptreact",
    "prefix": "page",
    "body": [
      "function ${1:name}Page({$2}) {",
      "$2",
      "}",
      "",
      "export default ${1:name}Page;"
    ],
    "description": "Create a next js page"
  },
  "Service": {
    "scope": "typescript",
    "prefix": "serv",
    "body": [
      "export async function ${1:name}Service(${2:payload}: ${1:name}Payload) {",
      "$3",
      "}"
    ],
    "description": "Create a service"
  },
  "Components": {
    "scope": "typescriptreact",
    "prefix": "comp",
    "body": [
      "interface ${1:Name}Props {",
      "$2",
      "}",
      "",
      "function ${3:Component}({ $4 }: ${1:Name}Props) {",
      "return (",
      "$5",
      ")",
      "}",
      "",
      "export default ${3:Component};"
    ],
    "description": "Create a component"
  },
  "Thunk": {
    "scope": "typescript",
    "prefix": "thunk",
    "body": [
      "export var ${1:name}Thunk = createAsyncThunk(",
      "   '${2:name}',",
      "   async function($3, {getState, dispatch}) {",
      "       var state = (getState() as RootState).$4",
      "       $5",
      "})"
    ],
    "description": "Create a thunk"
  }
}
